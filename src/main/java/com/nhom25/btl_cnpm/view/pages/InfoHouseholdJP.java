/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nhom25.btl_cnpm.view.pages;

import com.nhom25.btl_cnpm.controller.HouseholdController;
import com.nhom25.btl_cnpm.dao.ConnectionController;
import com.nhom25.btl_cnpm.entity.Household;
import com.nhom25.btl_cnpm.view.IndexView;
import static com.nhom25.btl_cnpm.view.IndexView.jpnContent;
import java.awt.BorderLayout;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hung Mai
 */
public class InfoHouseholdJP extends javax.swing.JPanel {

    /**
     * Creates new form InfoHousehold
     */
    Household household;
    DefaultTableModel model;
    
    public InfoHouseholdJP(Household household) {
        initComponents();
        model = (DefaultTableModel) tbFee.getModel();
        this.household = household;
        lbHouseholder.setText(household.getHouseholder());
        lbNumOfPeople.setText("" + household.getNumOfPeople());
        lbTotalMoney.setText("" + 1000*household.getMoney());        
        showFeeOfHousehold();
    }
    
    public void showFeeOfHousehold(){
        try {
            ConnectionController con = new ConnectionController();
            model.setRowCount(0);
            for(int fId: household.getListOfFee()){
                model.addRow(new Object[]{model.getRowCount() + 1,
                    con.findFee(fId).getName(), household.listOfFee.get(fId)*1000});
            }
        } catch (SQLException ex) {
            Logger.getLogger(InfoHouseholdJP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbFee = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnEditFee = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbHouseholder = new javax.swing.JLabel();
        lbNumOfPeople = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbTotalMoney = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("THÔNG TIN HỘ DÂN");

        tbFee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Tên khoản thu", "Số tiền đóng góp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbFee.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbFee);
        if (tbFee.getColumnModel().getColumnCount() > 0) {
            tbFee.getColumnModel().getColumn(0).setResizable(false);
            tbFee.getColumnModel().getColumn(1).setResizable(false);
            tbFee.getColumnModel().getColumn(2).setResizable(false);
        }

        jButton1.setText("Quay lại");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnEditFee.setText("Thay đổi đóng góp");
        btnEditFee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditFeeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Tên chủ hộ:");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Số nhân khẩu:");

        lbHouseholder.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        lbHouseholder.setText("Mai Tuấn Hưng");
        lbHouseholder.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                lbHouseholderComponentAdded(evt);
            }
        });

        lbNumOfPeople.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lbNumOfPeople.setText("4");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel4.setText("Tổng số tiền đã đóng:");

        lbTotalMoney.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lbTotalMoney.setText("money");

        btnAdd.setText("Thêm đóng góp");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Xoá");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(btnAdd)
                .addGap(51, 51, 51)
                .addComponent(btnEditFee)
                .addGap(78, 78, 78)
                .addComponent(btnDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(274, 274, 274)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(201, 201, 201)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbNumOfPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbHouseholder, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(lbTotalMoney)))))
                        .addGap(0, 197, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbHouseholder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lbNumOfPeople))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(lbTotalMoney))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditFee)
                    .addComponent(jButton1)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditFeeActionPerformed
        // TODO add your handling code here:
        int r = tbFee.getSelectedRow();
        if(r == 0){
            JOptionPane.showMessageDialog(jPanel1, "Không thể sửa khoản đóng góp này!", "Thông báo", 0);
        }
        else if(r > -1){
            ChangeFeeOfHouseholdInHouseholdJF frame = new ChangeFeeOfHouseholdInHouseholdJF(household.gethId(), household.getListOfFee().get(r));
            frame.setVisible(true);
            showFeeOfHousehold();
        } else JOptionPane.showMessageDialog(jPanel1, "Chọn hàng để chỉnh sửa!", "Thông báo", 0);
        
    }//GEN-LAST:event_btnEditFeeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        IndexView.jpnContent.removeAll();    
        IndexView.jpnContent.setLayout(new BorderLayout());
        IndexView.jpnContent.add(new HouseholdManageJP());
        IndexView.jpnContent.validate();
        IndexView.jpnContent.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void lbHouseholderComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_lbHouseholderComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_lbHouseholderComponentAdded

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            // TODO add your handling code here:
            new AddMoneyInHouseholdJF(household).setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(InfoHouseholdJP.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int r = tbFee.getSelectedRow();
        if(r == 0){
            JOptionPane.showMessageDialog(jPanel1, "Không thể xoá khoản đóng góp này!", "Thông báo", 0);
        }
        else if(r > -1){
            String[] options = {"Có", "Không"};
            int input = JOptionPane.showOptionDialog(null, "Bạn có chắc chắn muốn xoá đóng góp này không?\nKhông thể hoàn lại thao tác này.", "Xác nhận", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null);   
            if(input == 0){
                try {
                    HouseholdController hcon = new HouseholdController();
                    boolean correct = hcon.removeFeeOfHousehold(household.gethId(), household.getListOfFee().get(r)); // thay hàm xoá dóng góp vào đây
                    if(correct){
                        JOptionPane.showMessageDialog(this, "Xoá thành công!", "Thông báo", 1);
                        jpnContent.removeAll();
                        jpnContent.setLayout(new BorderLayout());
                        jpnContent.add(new InfoHouseholdJP(new ConnectionController().findHousehold(household.gethId())));
                        jpnContent.validate();
                        jpnContent.repaint();
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Đã có lỗi xảy ra!", "Thông báo", 0);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(HouseholdManageJP.class.getName()).log(Level.SEVERE, null, ex);
                }                
                showFeeOfHousehold();
            }
            showFeeOfHousehold();
        } else JOptionPane.showMessageDialog(jPanel1, "Chọn hàng để xoá!", "Thông báo", 0);
        
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEditFee;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbHouseholder;
    private javax.swing.JLabel lbNumOfPeople;
    private javax.swing.JLabel lbTotalMoney;
    private javax.swing.JTable tbFee;
    // End of variables declaration//GEN-END:variables
}
